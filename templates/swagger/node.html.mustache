
<script type="text/javascript">

// *** DISABLES console.log ***
var console = {};
console.log = function(){};
// ***


    RED.nodes.registerType('{{&nodeName}}', {
        category: 'Cisco Meraki',
        color: '#67b346',
        defaults: {
            {{#hasServiceParams}}
            service: { value: "", type: "{{&nodeName}}-service", required: true },
            {{/hasServiceParams}}
    
            name: { value: "" },
            methodGroups: [],
            selectedGroup: { value: "" },
            selectedMethod: { value: "" },
            filteredMethods: [],
            //: { value: "" },
            currentParams: [{value: ""}],
            storedParams: [{value: ""}], // testing
            formHtml: { value: "" },
            method: { value: "", required: true }                
        },
        inputs: 1,
        outputs: 1,
        icon: '{{&icon}}',
        label: function () {
            return this.name || "{{&nodeName}}";
        },
        oneditsave: function () {     
            console.log('oneditsave');
            
            var node = this;

            // Set the default name of the Node, if not already defined
            console.log('this.name: ', this.name)
            if(!this.name){
                this.name = $('#node-input-method').val()
                $('#node-input-name').val(this.name);
            }

            // Save the current Group and Method selector
            this.selectedGroup = $('#node-input-group option:selected').val()
            this.selectedMethod = $('#node-input-method option:selected').val()
    
            
            // Save form parameters
             node.storedParams = [];
             node.storedParams = [...node.storedParams, ...node.currentParams];
             console.log("node.storedParams", node.storedParams);


            $(`#help-method-${this.selectedMethod}`).show();
             // DEBUG
            console.log('node: (node) ', node);
        },
        oneditprepare: function () {

            var node = this;
            //console.log("node ", node);


            //if(!node.methodGroups){
            var methodGroups = [];
           
            // Import Swagger Spec and map to local array for advanced filtering, etc.
            {{#methods}}    
                var example = `{{&exampleString}}`;
                var parameters = []
                var formHtml = ``;   
                    formHtml += `<h4>Parameters</h4>`;
                    {{#parameters}}  
                        formHtml += `<div class="form-row" id="{{&methodName}}_{{&camelCaseName}}">`;                      
                    {{#required}}                        
                        formHtml += `<label for="node-input-{{&methodName}}_{{&camelCaseName}}" style="width:70%"><i class="fa fa-list"></i> <span><b>{{&camelCaseName}}<span style="color:red;"> *</span></b> <i>&nbsp{{&type}}</i></span></label>`;                  
                    {{#tsType}}
                    {{#isEnum}}
                        formHtml += `<select id="node-input-{{&methodName}}_{{&camelCaseName}}">`;
                    {{/isEnum}}
                    {{/tsType}}
                    {{#enum}}
                        formHtml += `<option value="{{.}}">{{.}}</option>`;
                    {{/enum}}
                    {{#tsType}}
                    {{#isEnum}}
                        formHtml += `</select>`;
                    {{/isEnum}}
                    {{/tsType}}
                    {{#tsType}}
                    {{^isEnum}}
                        formHtml += `<p>{{&description}}</p>`;
                        formHtml += `<input type="text" id="node-input-{{&methodName}}_{{&camelCaseName}}" placeholder="msg.{{&camelCaseName}}" style="width:70%">`;
                        formHtml += `<input type="hidden" id="node-input-{{&methodName}}_{{&camelCaseName}}Type" value="{{&type}}" >`;
                    {{/isEnum}}
                    {{/tsType}}
                        formHtml += `</div>`;
                    {{/required}}
                    
                    {{^required}} 
                        formHtml += `<label for="node-input-{{&methodName}}_{{&camelCaseName}}" style="width:70%"><i class="fa fa-list"></i> <span><b>{{&camelCaseName}}</b> <i>&nbsp{{&type}}</i></span></label>`;                  
                    {{#tsType}}
                    {{#isEnum}}
                        formHtml += `<select id="node-input-{{&methodName}}_{{&camelCaseName}}">`;
                    {{/isEnum}}
                    {{/tsType}}
                    {{#enum}}
                        formHtml += `<option value="{{.}}">{{.}}</option>`;
                    {{/enum}}
                    {{#tsType}}
                    {{#isEnum}}
                        formHtml += `</select>`;
                    {{/isEnum}}
                    {{/tsType}}
                    {{#tsType}}
                    {{^isEnum}}
                        formHtml += `<p>{{&description}}</p>`;
                        formHtml += `<input type="text" id="node-input-{{&methodName}}_{{&camelCaseName}}" placeholder="msg.{{&camelCaseName}}" style="width:70%">`;
                        formHtml += `<input type="hidden" id="node-input-{{&methodName}}_{{&camelCaseName}}Type" value="{{&type}}" >`;
                    {{/isEnum}}
                    {{/tsType}}
                        formHtml += `</div>`;
                    {{/required}}


                    parameters.push({
                        camelCaseName: "{{&camelCaseName}}"
                        })
                {{/parameters}}       

                methodGroups.push({methodGroup:"{{&methodGroup}}", methodName:"{{&methodName}}", parameters: parameters, formHtml: formHtml, example: example, summary: `{{&summaryString}}`});
                                         
            {{/methods}}
            

            var filterMethods = function(){
                node.filteredMethods = methodGroups.filter(m => m.methodGroup === node.selectedGroup);
                console.log(" filterMethods() node.filteredMethods", node.filteredMethods);            
                node.filteredMethods.forEach(m => {
                    $("#node-input-method").append(`<option value='${m.methodName}' data-i18n="{{&className}}.parameters.${m.methodName}">${m.methodName}</option>`);                 
                })

                var methods = $('#node-input-method').children();
                var firstMethod = methods.first();
                $('#node-input-method').val(firstMethod.val()).change();
            }

      
            console.log('OPEN STATE');
            console.log('oneditprepare methodGroups', methodGroups); 
            console.log('this.selectedGroup ', node.selectedGroup);
            console.log('this.selectedMethod ', node.selectedMethod);
            //console.log('this.currentParams ', node.currentParams);
            console.log('this.storedParams ', node.storedParams);
            console.log('this.filteredMethods ', node.filteredMethods);
      

            // SET FORM from from state  
            // -- Load Method Group Selector
            if (!node.selectedGroup) {            
                console.log('oneditprepare #node-input-group', $('#node-input-group').val()); 
                $('#node-input-group').val('#node-input-group option:first').val();    
            }                   
            $('#node-input-group').val(node.selectedGroup).change();   

            // -- Load Method Selector
            if(!node.filteredMethods){
                filterMethods();
            }
            if (!node.selectedMethod) {
                console.log('oneditprepare #node-input-method', $('#node-input-method').val()); 
                $('#node-input-method').val('#node-input-method option:first').val();                         
            } 


            node.filteredMethods.forEach(m => {
                $("#node-input-method").append(`<option value='${m.methodName}' data-i18n="{{&className}}.parameters.${m.methodName}">${m.methodName}</option>`);                 
            });
            
            $('#node-input-method').val(node.selectedMethod).change();
            
            
            // -- Load Current Params
            console.log('LOADED FROM FORM STATE');
            console.log('this.selectedGroup ', node.selectedGroup);
            console.log('this.selectedMethod ', node.selectedMethod);
            //console.log('this.currentParams ', node.currentParams);
            console.log('this.filteredMethods ', node.filteredMethods);

            
            // Event Handlers for Group and Method selectors
            
            $("#node-input-group").change(function () {
                node.selectedGroup = $('#node-input-group').val();
                console.log('group changed', node.selectedGroup);    

                // clear selected method options                     
                var select = $("#node-input-method")
                $('option', select).remove();

               // Update Method Selector with filterd list
                filterMethods();
            });

            
            $("#node-input-method").change(function () {     
                node.selectedMethod = $('#node-input-method').val()
                $(`#method-summary`).empty()
                if(!node.selectedMethod){    
                    return
                    }
                
                var method  = node.filteredMethods.filter(m => m.methodName === node.selectedMethod)[0];
                $(`#method-summary`).append(`<div><p><i>${method.summary}</i></p></div>`);

                console.log('method changed', node.selectedMethod);
                showParameters();
            });

            // Display Parameters Form                  
            var showParameters = function () { 
                console.log("showParameters()");
                $(`#current-params`).empty();  
                    
                      
                if(!node.selectedMethod){
                    console.log("showParameters() no node.selectedMethod"); 
                    return
                }      
                console.log('node.filteredMethods ', node.filteredMethods);
                console.log('node.selectedMethod', node.selectedMethod); // Now Showing Selected Group
                
                
                var method = node.filteredMethods.filter(m => m.methodName === node.selectedMethod)[0];
                console.log('method', method);
                if(!method){return}
                 
                $(`#current-params`).append(method.formHtml); 
                $(`#current-params`).append(`<div><h4>Sample Response</h4><pre>${method.example}<code></code></pre></div>`); 

                // DEBUG
                console.log('node', node);


                // Register Event Handlers
                method.parameters.forEach(p => {                 
                    console.log(`${method.methodName}_${p.camelCaseName}`);
                    
                    // Register Event Handler for Parameter
                    console.log('registering event handler');
                    $(`#node-input-${method.methodName}_${p.camelCaseName}`).change(function (e) {
                        console.log(`#node-input-${method.methodName}_${p.camelCaseName} e`,e);
                        
                        // Store temp param info
                        if(!node.currentParams){ node.currentParams = []}

                        //Find index of specific object using findIndex method.    
                        objIndex = node.currentParams.findIndex((obj => obj.camelCaseName == p.camelCaseName));
                        
                        if(objIndex > -1){
                            //Update object's name property.
                            node.currentParams[objIndex].value = e.target.value
                        }else{
                            //Create new object
                            node.currentParams.push({
                                methodName: method.methodName,
                                camelCaseName: p.camelCaseName,
                                type: 'str',
                                value: e.target.value
                            });
                        }
                        
                        node.changed = true; // testing forced change
                    });
                })

                // Assign existing values to form
                loadParamValues();

                // debug             
                console.log('node (after param form process)',node)

            };

            var loadParamValues = function(){
                console.log('loading storedParams ', node.storedParams);
                if(!node.storedParams){return}
                if(node.storedParams.length > 0){
                    node.storedParams.forEach(p => {
                        storedVal = p.value;
                        console.log('storedVal ', storedVal);
                        $(`#node-input-${p.methodName}_${p.camelCaseName}`).val(storedVal);
                    })
                }
            }

        }
    });
</script>

<script type="text/x-red" data-template-name="{{&nodeName}}">
    <div class="form-row">
        <label for="node-input-name"><i class="fa fa-tag"></i> <span data-i18n="node-red:common.label.name"></span></label>
        <input type="text" id="node-input-name" data-i18n="[placeholder]node-red:common.label.name">
    </div>
    {{#hasServiceParams}}
    <div class="form-row">
        <label for="node-input-service"><i class="fa fa-cloud"></i> <span data-i18n="{{&className}}.label.service"></span></label>
        <input type="text" id="node-input-service">
    </div>
    {{/hasServiceParams}}

    <div class="form-row">
        <label for="node-input-group"><i class="icon-tasks"></i> <span data-i18n="{{&className}}.label.methodGroup"></span> <span>Group</span></label>
        <select id="node-input-group">
            {{#tags}}
            <option value="{{.}}" >{{.}}</option>
            {{/tags}}
        </select>
    </div>
    <div class="form-row">
        <label for="node-input-method"><i class="icon-tasks"></i> <span data-i18n="{{&className}}.label.method"></span></label>
        <select id="node-input-method">
        </select>
        <div id="method-summary-container">
            <div id="method-summary">
                <!-- dynamic content -->
            </div>
        </div>
    </div>

   <div id="current-params">
    <!-- Dynamic Code -->
   <div>

    

    <hr/>
    
</script>

<script type="text/x-red" data-help-name="{{&nodeName}}">
<p>Connect to the Meraki Cloud platform using the <a href="https://create.meraki.com/api">Dashboard API</a>.</p>

<h3>Inputs</h3>
    <dl class="message-properties">     
        <dt class="optional">someParamId <span class="property-type">any</span></dt>
        <dd> The various parameters required for the operation being called. These are specified in the form input placeholders. The parameter description will include any required value types.</dd>
        
        <dt>payload
            <span class="property-type">object</span>
        </dt>
        <dd> The payload of the body when submitting an update to the network (PUT/POST). Alternatively, you can use the literal paramater name which matches the method operation name (i.e.) <code>provisionNetworkClients</code>. </dd>
    <h4>Example Input</h4>
    <i>provisionNetworkClients</i>
    <pre><code>
msg.organizationId = "306267";
msg.networkId = "L_643451796760561416";
msg.payload = {
    "mac": "11:22:33:aa:bb:cc",
    "name": "Test Client",
    "devicePolicy": "Group policy",
    "groupPolicyId": "100"
}

return msg;
    </code></pre>

    
    </dl>
<h3>Outputs</h3>
    <dl class="message-properties">     
        <dt>payload <span class="property-type">object</span></dt>
        <dd> The response body of the API call. Look to the sample when selecting a method operation.</dd>      
    </dl>
    <h4>Example Output</h4>
    <pre><code>
{
    "mac":"11:22:33:aa:bb:cc",
    "clientId":"k8ae033",
    "name":"Test Client",
    "devicePolicy":"Group policy",
    "groupPolicyId":100
}
    </code></pre>

<h3>Details</h3>

{{{name}}}
    <p>Cisco Meraki Dashboard Node</p>
    &nbsp &nbsp &nbsp<i>OAS version: {{&version}}</i>
    <hr/>
    <br>
    <p>The Cisco Meraki Dashboard API is a modern REST API based on the <a href="https://swagger.io/docs/specification/about/" target="_blank">OpenAPI</a> specification. 
    <h4>What can the API be used for?</h4>
    <p>The Dashboard API can be used for many purposes. It's meant to be an open-ended tool. Here are some examples things you can manage</p>
    <ul>      
        <li>admins</li>
        <li>clients</li>
        <li>devices</li>
        <li>networks</li>
        <li>organizations</li>
        <li>SSIDs</li>
        <li>VLANs</li>
        <li>and more..</li>
    </ul>

    <div id="current-method-info-container">
        <div id="current-method-info">
        <!-- placeholder for dynamic content -->
        </div>
    </div>
    
    <h3>References</h3>
    <ul>
        <li><a href="https://create.meraki.io/api" target="_blank">Meraki API docs</a> - full description of parameters and example values.</li>
        <li><a href="https://postman.meraki.com">Postman Collection</a> for the Dashboard API.</li>
    </ul>

    <p>Visit the <a href="https://create.meraki.com" targer="_blank">Cisco Meraki Developer Hub</a> to learn more.</p>
    <p>Developed by <a href="https://github.com/dexterlabora" target="_blank">DexterLaBora</a></p>
    <p>Visit <a href="https://www.internetoflego.com">Internet of LEGO</a> for more fun projects.</p>

    
   
</script>
{{#hasServiceParams}}
<script type="text/javascript">
    RED.nodes.registerType('{{&nodeName}}-service', {
        category: 'config',
        defaults: {           
            host: { value: "https://api.meraki.com/api/v0", required: true },
            {{#isSecure}}
            {{#isSecureToken}}
            secureTokenHeaderOrQueryName: { value: "" },
            secureTokenIsQuery: { value: false },
            {{/isSecureToken}}
            {{#isSecureApiKey}}
            secureApiKeyHeaderOrQueryName: { value: "X-Cisco-Meraki-API-Key" },
            secureApiKeyIsQuery: { value: false },
            {{/isSecureApiKey}}
            {{/isSecure}}

            name: { value: "" }
        },
        host: { type:"text"},
        credentials: {
            {{#isSecure}}
            {{#isSecureToken}}
            secureTokenValue: { type:"password" },
            {{/isSecureToken}}
            {{#isSecureApiKey}}
            secureApiKeyValue: { type:"password" },
            {{/isSecureApiKey}}
            {{#isSecureBasic}}
            username: { type:"text" },
            password: { type:"password" },
            {{/isSecureBasic}}
            {{/isSecure}}
            temp: { type:"text" }
        },
        label: function () {
            return this.name;
        },
        oneditprepare: function () {
            {{#isSecure}}
            {{#isSecureToken}}
            $('#node-config-input-secureTokenHeaderOrQueryName-label').hide();
            $('#node-config-input-secureTokenHeaderOrQueryName').hide();
            $('#node-config-input-secureTokenValue-label').hide();
            $('#node-config-input-secureTokenValue').hide();

            $('#node-config-input-secureTokenIsQuery-label').hide();
            $('#node-config-input-secureTokenIsQuery').hide();
            var selected = $('#node-config-input-secureTokenIsQuery option:selected');
            if (!selected.val()) {
                $('#node-config-input-secureTokenIsQuery').val('false');
            }
            {{/isSecureToken}}
            {{#isSecureApiKey}}
            $('#node-config-input-secureApiKeyIsQuery-label').hide();
            $('#node-config-input-secureApiKeyIsQuery').hide();
            var selected = $('#node-config-input-secureApiKeyIsQuery option:selected');
            if (!selected.val()) {
                $('#node-config-input-secureApiKeyIsQuery').val(false);
            }
            {{/isSecureApiKey}}
            {{/isSecure}}
        }
    });
</script>

<script type="text/x-red" data-template-name="{{&nodeName}}-service">

    <div class="form-row">
        <label for="node-config-input-host"><i class="fa fa-globe"></i> <span data-i18n="{{&className}}.label.host"></span></label>
        <input type="text" id="node-config-input-host" placeholder="https://localhost:1880">
    </div>

    {{#isSecure}}
    {{#isSecureApiKey}}
    <div hidden>
    <div class="form-row">
        <label id="node-config-input-secureApiKeyHeaderOrQueryName-label" for="node-config-input-secureApiKeyHeaderOrQueryName"><i class="fa fa-list"></i> <span data-i18n="{{&className}}.label.header"></span></label>
        <input type="text" id="node-config-input-secureApiKeyHeaderOrQueryName" placeholder="">
    </div>
    </div>
    <div class="form-row">
        <label id="node-config-input-secureApiKeyValue-label" for="node-config-input-secureApiKeyValue"><i class="fa fa-lock"></i> <span data-i18n="{{&className}}.label.value"></span></label>
        <input type="password" id="node-config-input-secureApiKeyValue" placeholder="">
    </div>
    <div class="form-row">
        <label id="node-config-input-secureApiKeyIsQuery-label" for="node-config-input-secureApiKeyIsQuery"><i class="fa fa-dot-circle-o"></i> <span data-i18n="{{&className}}.label.isQuery"></span></label>
        <select id="node-config-input-secureApiKeyIsQuery">
            <option value="true">true</option>
            <option value="false">false</option>
        </select>
    </div>
    {{/isSecureApiKey}}
    {{#isSecureBasic}}
    <div class="form-row">
        <label id="node-config-input-username-label" for="node-config-input-username"><i class="fa fa-user"></i> <span data-i18n="node-red:common.label.username"></span></label>
        <input type="text" id="node-config-input-username" placeholder="">
    </div>
    <div class="form-row">
        <label id="node-config-input-password-label" for="node-config-input-password"><i class="fa fa-lock"></i> <span data-i18n="node-red:common.label.password"></span></label>
        <input type="password" id="node-config-input-password" placeholder="">
    </div>
    {{/isSecureBasic}}
    {{/isSecure}}

    <div class="form-row">
        <label for="node-config-input-name"><i class="fa fa-tag"></i> <span data-i18n="node-red:common.label.name"></span></label>
        <input type="text" id="node-config-input-name" data-i18n="[placeholder]node-red:common.label.name">
    </div>
</script>

<script type="text/x-red" data-help-name="{{&nodeName}}-service">
   
    <p><b>Host</b>: URL to connect</p>
   

    {{#isSecure}}
    {{#isSecureToken}}
    <p><b>Header</b>: Variable name to set token</p>
    <p><b>Value</b>: Value of token</p>
    {{/isSecureToken}}
    {{#isSecureApiKey}}
    <!-- <p><b>Header</b>: Variable name to set API key</p> -->
    <p><b>API Key</b>: Value of the Meraki API key</p>
    {{/isSecureApiKey}}
    {{#isSecureBasic}}
    <p><b>Username</b>: Username in Basic authentication</p>
    <p><b>Password</b>: Password in Basic authentication</p>
    {{/isSecureBasic}}
    {{/isSecure}}
</script>
{{/hasServiceParams}}
